---
#------------------------------------------------------------------
# TODO: 고정된 내부 아이피 발급
#------------------------------------------------------------------

#------------------------------------------------------------------
# Common variable
#------------------------------------------------------------------
x-variables:
  password: &password "sv_demo"
  ELASTIC_VERSION: &elastic_version 8.17.2

#------------------------------------------------------------------
# Volumes
#------------------------------------------------------------------
volumes:
  elasticsearch:
    driver: local

services:
  #------------------------------------------------------------------
  # Kafka UI
  #------------------------------------------------------------------
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 5580:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: true
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-1:19092,kafka-2:29092,kafka-3:39092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    volumes:
      - /home/catch/bench-sv/SV_ETL_DEMO/kui/config.yml:/etc/kafkaui/dynamic_config.yml
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      - kafka_net

  #------------------------------------------------------------------
  # Schema Registry
  #------------------------------------------------------------------
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka-1:19092,kafka-2:29092,kafka-3:39092"
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
    ports:
      - "8081:8081"
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      - kafka_net

  #------------------------------------------------------------------
  # Kafka Connect
  #------------------------------------------------------------------
  connect:
    image: confluentinc/cp-kafka-connect:latest
    environment:
      CONNECT_REST_PORT: 8083
      CONNECT_BOOTSTRAP_SERVERS: kafka-1:19092,kafka-2:29092,kafka-3:39092
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: "kafka.connect.group"
      CONNECT_CONFIG_STORAGE_TOPIC: "service.connect.configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "service.connect.offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "service.connect.status"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      - kafka_net
    volumes:
      - ./scraper/jars:/etc/kafka-connect/jars

  #------------------------------------------------------------------
  # DB
  #------------------------------------------------------------------
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: on-failure:10
    environment:
      MYSQL_DATABASE: joongo_market_product_db
      MYSQL_USER: sv_user
      MYSQL_PASSWORD: sv_demo
      MYSQL_ROOT_PASSWORD: sv_demo_root
    ports:
      - "3306:3306"
    networks:
      - kafka_net

  #------------------------------------------------------------------
  # Kafka Zookeeper
  #------------------------------------------------------------------
  zookeeper-1:
    hostname: zookeeper-1
    image: confluentinc/cp-zookeeper:latest
    container_name: sv-zookeeper-1
    restart: always
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 3000
      ZOOKEEPER_DATA_DIR: /zookeeper/data
      ZOOKEEPER_SERVERS: zookeeper-1:12888:13888;zookeeper-2:22888:23888;zookeeper-3:32888:33888
    ports:
      - "12181:2181"
      - "12888:2888"
      - "13888:3888"
    volumes:
      - ./zookeeper/data/1:/zookeeper/data
    networks:
      - kafka_net

  zookeeper-2:
    hostname: zookeeper-2
    image: confluentinc/cp-zookeeper:latest
    container_name: sv-zookeeper-2
    restart: always
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 3000
      ZOOKEEPER_DATA_DIR: /zookeeper/data
      ZOOKEEPER_SERVERS: zookeeper-1:12888:13888;zookeeper-2:22888:23888;zookeeper-3:32888:33888
    ports:
      - "22181:2181"
      - "22888:2888"
      - "23888:3888"
    volumes:
      - ./zookeeper/data/2:/zookeeper/data
    networks:
      - kafka_net

  zookeeper-3:
    hostname: zookeeper-3
    image: confluentinc/cp-zookeeper:latest
    container_name: sv-zookeeper-3
    restart: always
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 3000
      ZOOKEEPER_DATA_DIR: /zookeeper/data
      ZOOKEEPER_SERVERS: zookeeper-1:12888:13888;zookeeper-2:22888:23888;zookeeper-3:32888:33888
    ports:
      - "32181:2181"
      - "32888:2888"
      - "33888:3888"
    volumes:
      - ./zookeeper/data/3:/zookeeper/data
    networks:
      - kafka_net

  #------------------------------------------------------------------
  # Kafka Broker
  #------------------------------------------------------------------
  kafka-1:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-1
    container_name: sv-kafka-1
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_HEAP_OPTS: -Xmx4G -Xms1G -XX:+UseG1GC
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181,zookeeper-3:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:19092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:19092
      KAFKA_LOG_DIR: /kafka
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote=true 
                       -Dcom.sun.management.jmxremote.port=19999 
                       -Dcom.sun.management.jmxremote.rmi.port=19999 
                       -Dcom.sun.management.jmxremote.authenticate=false 
                       -Djava.rmi.server.hostname=kafka-1
                       -Dcom.sun.management.jmxremote.ssl=false"
    ports:
      - 19092:9092
      - 19999:19999
    volumes:
      - ./kafka/logs/1:/kafka
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    networks:
      - kafka_net

  kafka-2:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-2
    container_name: sv-kafka-2
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_HEAP_OPTS: -Xmx4G -Xms1G -XX:+UseG1GC
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181,zookeeper-3:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    ports:
      - "29092:9092"
    volumes:
      - ./kafka/logs/2:/kafka
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    networks:
      - kafka_net

  kafka-3:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-3
    container_name: sv-kafka-3
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_HEAP_OPTS: -Xmx4G -Xms1G -XX:+UseG1GC
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181,zookeeper-3:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:39092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:39092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    ports:
      - "39092:9092"
    volumes:
      - ./kafka/logs/3:/kafka
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    networks:
      - kafka_net

  #------------------------------------------------------------------
  # Kafka Manager
  #------------------------------------------------------------------
  akhq:
    image: tchiotludo/akhq:latest
    hostname: akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            kafka:
              properties:
                bootstrap.servers: kafka-1:19092,kafka-2:29092,kafka-3:39092
    ports:
      - 5680:8080
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      - kafka_net

  #------------------------------------------------------------------
  # ELK
  # https://github.com/deviantony/docker-elk
  #------------------------------------------------------------------
  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: *elastic_version
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_USERNAME: elastic
      ELASTIC_PASSWORD: *password # 편의상 하드코딩. (본래 setup 스크립트 호출 방식)
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    restart: on-failure:10
    networks:
      - kafka_net

  logstash:
    build:
      context: logstash/
      args:
        ELASTIC_VERSION: *elastic_version
    volumes:
      - type: bind
        source: ./logstash/config
        target: /usr/share/logstash/config
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - 5044:5044
      - 50000:50000/tcp
      - 50000:50000/udp
      - 9600:9600         # api port
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx512m
      LOGSTASH_INTERNAL_PASSWORD: *password   # ${LOGSTASH_INTERNAL_PASSWORD:-}
    depends_on:
      - elasticsearch
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      - kafka_net

  kibana:
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: *elastic_version
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: *password # ${KIBANA_SYSTEM_PASSWORD:-}
    depends_on:
      - elasticsearch
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      - kafka_net

#------------------------------------------------------------------
# Network
#------------------------------------------------------------------
networks:
  kafka_net:
    driver: bridge
